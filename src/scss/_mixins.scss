@use "sass:math";
@use "sass:list";
@use "sass:map";

@import "_variables";
@import "_functions";






@mixin css-variables {
	//$project-name: 'katusha';
  $prefix: '--';

	@each $key, $value in $variables {
    @if is-map($value) {
      //-- ↓ #{$key}:↓ ;
      @each $map-key, $map-value in $value {
        $css-key: '#{$prefix}#{$key}_#{$map-key}';
        $css-value: $map-value;

  			#{$css-key}: #{$css-value};
  		}
    }
    @else {
      #{$prefix}#{$key}: #{$value};
    }
	}
}

@mixin font-face-props($path, $font, $weight-value, $weight-name, $ext, $italic: false) { // remove $path; mb replace on func
  $format: '';

  @if $ext == 'woff' {
    $format: 'woff';
  } @else if $ext == 'woff2' {
    $format: 'woff2';
  } @else if $ext == 'ttf' {
    $format: 'truetype';
  } @else if $ext == 'otf' {
    $format: 'opentype';
  } @else if $ext == 'eot' {
    $format: 'embedded-opentype'
  } @else if $ext == 'svg' {
    $format: 'svg';
  }

  font-family: $font;
  font-display: auto;
  unicode-range: U+000-5FF;
  font-weight: $weight-value;
  @if $italic {
    font-style: italic;
    src: local($font),
         url('#{$path}/#{$font}/#{$font}-#{$weight-name}Italic.#{$ext}') format($format),
  } @else {
    font-style: normal;
    src: local($font),
         url('#{$path}/#{$font}/#{$font}-#{$weight-name}.#{$ext}') format($format),
  }
}

@mixin setup-font($path, $font, $exts, $italic: false) { // Use prebuild.js first ; *remove $path*
  $weights: (
    100: 'Thin',
    200: 'ExtraLight',
    300: 'Light',
    400: 'Regular',
    500: 'Medium',
    600: 'SemiBold',
    700: 'Bold',
    800: 'ExtraBold',
    900: 'Black',
  );

  @each $ext in $exts {
    @each $weight-value, $weight-name in $weights {
      @font-face {
        @include font-face-props($path, $font, $weight-value, $weight-name, $ext);
        @if $italic {
          @include font-face-props($path, $font, $weight-value, $weight-name, $ext, true);
        }
      }
    }
  }
}

@mixin to-responsive($css-map-or-prop: font-size, $min-size: null, $max-size: get-var(font-size, base), $min-vw: get-var(breakpoint, xs), $max-vw: get-var(container)) {
  // with one map handler will be simpler, won't need to put defaults in func calc-responsive
  // and won't need to set to-unit separatly
  // or handle map differently
  // или похуй
  // add min-vw min-vw result unit
  @if type-of($css-map-or-prop) == 'string' {
    $property: $css-map-or-prop;
    $min-size: to-unit($min-size, 'px');
    $max-size: to-unit($max-size, 'px');
    $min-vw: to-unit($min-vw, 'px');
    $max-vw: to-unit($max-vw, 'px');

    @media (max-width: $min-vw) { // replace on custom
      #{$property}: $min-size; // mb should be rem ?
    }

    @media (min-width: $min-vw) and (max-width: $max-vw) { // replace on custom
      #{$property}: calc-responsive($min-size, $max-size, $min-vw, $max-vw);
    }

    @media (min-width: $max-vw) { // replace on custom
      #{$property}: $max-size; // mb should be rem ?
    }
  } @else if type-of($css-map-or-prop) == 'map' {
    $calculated: ();

    @each $property, $values in $css-map-or-prop {
      @if type-of($values) == 'list' {
        $pxValues: ();

        @each $value in $values {
          $pxValues: list.append($pxValues, to-unit($value, 'px'));
        }

        $calculated: map.set($calculated, $property, #{calc-responsive($pxValues...)});
      } @else {
         @error 'if u not want to use list as value then use to-unit out of to-responsive';
      }
    }

    @media (max-width: $min-vw) { // replace on custom
      @each $property, $value in $css-map-or-prop {
        #{$property}: to-unit(nth($value, 1), 'px'); // mb replace on rem ?
      }
    }

    @media (min-width: $min-vw) and (max-width: $max-vw) { // replace on custom
      @each $property, $calcValue in $calculated {
        #{$property}: $calcValue;
      }
    }

    @media (min-width: $max-vw) { // replace on custom
      @each $property, $value in $css-map-or-prop {
        #{$property}: to-unit(nth($value, 2), 'px'); // mb replace on rem ?
      }
    }
  }
}

@mixin h($level, $color: null, $weight: false, $margin-bottom: null, $upper: false, $relative: true) {
  $line-height: 1.22em;
  $max-variable: get-var(font-size, h#{$level});
  $min-variable: get-var(font-size, h#{$level}_mobile);

  @if ($relative and $min-variable) {
    $min: to-unit($min-variable, 'px');
    $max: to-unit($max-variable, 'px');
    @include to-responsive(font-size, $min, $max);
  } @else {
    font-size: $max-variable;
  }


  line-height: $line-height;

  @if ($color) {
    color: $color;
  } @else {
  }

  @if ($margin-bottom) {
    @if $margin-bottom == default {
      margin-bottom: 1em; // must be global variable; mb remove?
    } @else {
      @if ($relative) {
        @if (unit($margin-bottom) == 'em' or unit($margin-bottom) == 'rem') { // replace on to-responsive
          margin-bottom: $margin-bottom;
        } @else {
          margin-bottom: to-fixed(to-unit($margin-bottom, 'em', to-unit($max-variable, 'px'))); // replace on to-responsive
        }

      } @else {
        margin-bottom: $margin-bottom;
      }
    }
  }

  @if ($upper) {
    text-transform: uppercase;
  }

  @if $weight {
    @if type-of($weight) == 'number' {
      font-weight: $weight;
    } @else if $weight == bold {
      font-weight: 700; // mb replace on something
    }

  } @else {
    //font-weight: 400; // mb replace on something
  }

  // &:not(.font_bold) {
  //   @if $bold {
  //     font-weight: 700; // mb replace on something
  //   } @else {
  //     font-weight: 400; // mb replace on something
  //   }
  // }
}






@mixin container {
  max-width: calc(#{get-var(container)} + 30px);
  width: 100%;
  margin-right: auto;
  margin-left:  auto;
  padding-left:  15px;
  padding-right: 15px;
}



@mixin grid($min:null, $max:null, $gap:30px, $fit: true) {
  display: grid;
  gap: $gap;

  @if ($min and $max) {
    @if ($fit) {
      grid-template-columns: repeat(auto-fit, minmax($min, $max));
    } @else {
      grid-template-columns: repeat(auto-fill, minmax($min, $max));
    }
  } @else if ($min) {
    @if ($fit) {
      grid-template-columns: repeat(auto-fit, minmax($min, 1fr));
    } @else {
      grid-template-columns: repeat(auto-fill, minmax($min, 1fr));
    }
  } @else if ($max) {
    @if ($fit) {
      grid-template-columns: repeat(auto-fit, minmax(auto, $max));
    } @else {
      grid-template-columns: repeat(auto-fill, minmax(auto, $max));
    }
  }
}


@mixin flex-container($axis: row, $gap: null, $inline: false, $collapse: false) {
  @if $inline {
    display: inline-flex;
  } @else {
    display: flex;
  }

  flex-direction: $axis;

  @if $gap {
    @if type-of($gap) == 'list' {
      @include to-responsive(grid-gap, $gap...)
    } @else {
      grid-gap: $gap;
    }
  }

  @if $collapse {
    & > * {
      @if $axis == row {
        margin-right: 0;
        margin-left: 0;
      } @else {
        margin-top: 0;
        margin-bottom: 0;
      }
    }
  }
}

@mixin flex-centralize($inline: false) {
  @if $inline {
    display: inline-flex;
  } @else {
    display: flex;
  }

  align-items: center;
  justify-content: center;
}

// @mixin reversible-grid($cols, $reverse: false) {
//   $odd: odd;
//   $even: even;
//
//   @if $reverse {
//     $odd: even,
//     $even: odd,
//   }
//
//   & > * {
//     &:#{$odd} {
//       grid-template-columns: 450px minmax(450px, 810px);
//     }
//     &:#{$even} {
//       grid-template-columns: minmax(450px, 810px) 450px;
//       order: -1;
//     }
//   }
// }


// @mixin media($viewport:null, $min:null, $max:null) {
//   @if $viewport or $min and $max {
//     @media (
//       (min-width: get-var(viewport, $viewport or $min)) and
//       (max-width: get-var(viewport, $viewport or $max) - 1px)
//     ) {
//       @content;
//     }
//   } @else if $min {
//     @media (min-width: get-var(viewport, $min)) {
//       @content;
//     }
//   } @else if $max {
//     @media (max-width: get-var(viewport, $max) - 1px) {
//       @content;
//     }
//   }
// }

@mixin wrapper() {}; // compare el__wrapper with el__container styles

@mixin create-figure($size, $color: null, $radius: null, $border-size: null, $border-color: $color) {
  width:  100%;
  height: 100%;
  min-width:  #{$size}px;
  max-width:  #{$size}px;
  min-height: #{$size}px;
  max-height: #{$size}px;

  @if $color {
    background-color: $color;
  }

  @if $border-size {
    border-width: #{$border-size}px;
    border-style: solid;
  }

  @if $border-color {
    border-color: $border-color;
  }

  @if $radius {
    border-radius: $radius;
  }
}


@mixin truncate($count) {
  display: -webkit-box;
  -webkit-line-clamp: $count;
  -webkit-box-orient: vertical;

  overflow: hidden;
}

// @mixin passSelector ($child-selector: null) {
//     // инициализирует стили, или передает потомку
//     // обертка
//     @if ($child-selector){& .#{$child-selector} {
//         @content
//     }}
//     @else {
//         @content
//     }
// }

// @mixin fade-in { animation: animation-fade-in 350ms ease-in-out both }
// @mixin fade-out { animation: animation-fade-out 350ms ease-in-out both }






















@function fix-scroll($value, $items-in-row) { // combine with smart-grid
  //$scroll-fix: '((100vw - 100%) / #{$items-in-row})';
  // $scroll-fix: '((100vw - 100%) / #{$items-in-row})';
  //
  // @return calc(#{$value} - var(--d));

  @return calc($value - (100vw - 100%) / #{$items-in-row}));
}

@function to-minmax($values...) { // refactor
  @if len($values) == 1 {
    $value: nth($values, 1);

    @if type-of($value) != 'list' {
      @return $value;
    }

    $values: $value;
  }

  $min: nth($values, 1);
  $max: nth($values, 2);

  @if $min == $max or $min == null and $max {
    @return $max;
  } @else if $min and $max == null {
    @return $min;
  }


  @return minmax($min, $max);
}

@function parse-minmax($list) { // refactor
  $result: ();

  @each $value in $list {
    @if type-of($value) != 'list' {
      //$value: split($value);
    }

    $result: list.append($result, to-minmax($value))
  }

  @return $result;
}


// @mixin recurse-viewport($min, $cols, $gap: 30) { // len четное replace on count
//   // mode even/odd
//   // responsive-mode
//   $padding: 15 * 2;
//   $scroll: 17.5;
//   $start-responsive: $min * $cols + $gap * ($cols - 1) + $padding + $scroll;
//
//   @if ($cols > 2) {
//     $cols: $cols - 2;
//     @media (max-width: #{$start-responsive}px) {
//       grid-template-columns: repeat($cols, 1fr);
//     }
//
//     @include recurse-viewport($min, $cols);
//
//   } @else {
//     @media (max-width: #{$start-responsive}px) {
//       grid-template-columns: 1fr;
//     }
//   }
// }


// @mixin recurse-viewport($min, $cols, $gap: 30, $mode: 'even') { // len четное replace on count
//
//   $gaps-sum: $gap * ($cols - 1);
//   $padding: 15 * 2;
//   $scroll: 17.5;
//   $viewport: ($min * $cols) + $gaps-sum + $padding + $scroll;
//   $treshold: 2;
//
//   @if $mode == 'even' {
//     @if $cols % 2 != 0 {
//       $cols: $cols + 1;
//     }
//   } @else if $mode == 'odd' {
//     $treshold: 3;
//     @if $cols % 2 == 0 {
//       $cols: $cols + 1;
//     }
//   }
//
//   @if ($cols > $treshold) {
//     $cols: $cols - 2;
//     @media (max-width: #{$viewport}px) {
//       grid-template-columns: repeat($cols, 1fr);
//     }
//
//     @include recurse-viewport($min, $cols);
//
//   } @else {
//     @media (max-width: #{$viewport}px) {
//       grid-template-columns: 1fr;
//     }
//   }
// }


// @function calc-viewport-templates($min, $cols, $gap: 30, $mode: 'even') {
//   $calculated: ();
//   $padding: 15 * 2;
//   $scroll: 17.5;
//   $gaps-sum: null;
//   $viewport: null;
//   $treshold: 2;
//
//   @if $mode == 'even' {
//     @if $cols % 2 != 0 {
//       $cols: $cols + 1;
//     }
//   } @else if $mode == 'odd' {
//     $treshold: 3;
//     @if $cols % 2 == 0 {
//       $cols: $cols + 1;
//     }
//   }
//
//   @while $cols > $treshold {
//     $gaps-sum: $gap * ($cols - 1);
//     $viewport: ($min * $cols) + $gaps-sum + $padding + $scroll;
//     $cols: $cols - 2;
//     $calculated: append($calculated, ($viewport, repeat($cols, 1fr), $cols));
//   }
//
//   $viewport: ($min * $cols) + $gaps-sum + $padding + $scroll;
//   $calculated: append($calculated, ($viewport, 1fr, $cols));
//
//   @return $calculated;
// }

// @function calc-viewport-templates($min, $cols, $gap: 30, $mode: 'even') {
//
//   // $scroll: '(100vw - 100%)';
//   // --d: #{$scroll} / #{$cols};
//
//
//   $calculated: ();
//   $padding: 15 * 2;
//   $scroll: 17.5;
//   $gaps-sum: null;
//   $viewport: null;
//   $treshold: 2;
//
//   @while $cols > $treshold {
//     $gaps-sum: $gap * ($cols - 1);
//     $viewport: ($min * $cols) + $gaps-sum + $padding + $scroll;
//
//     @if $mode == 'even' {
//       @if $cols % 2 != 0 {
//         $cols: $cols + 1;
//       }
//     } @else if $mode == 'odd' {
//       @if $cols % 2 == 0 {
//         $cols: $cols + 1;
//       }
//       $treshold: 3;
//     }
//
//     $cols: $cols - 2;
//     $calculated: append($calculated, ($viewport, repeat($cols, 1fr), $cols));
//   }
//
//   $viewport: ($min * $cols) + $gaps-sum + $padding + $scroll;
//   $calculated: append($calculated, ($viewport, 1fr, $cols));
//
//   @return $calculated;
// }





@mixin test-st-vt($min, $cols, $gap: 30, $mode: 'even') {
  $stretch: 'all';

  @if $stretch == 'all' {
    $i: 1;
    $kaka: calc-viewport-templates($min, $cols, $gap, $mode);

    @if $mode == 'even' {

    } @else {

    }

    $cols: len($kaka);
    @each $viewport, $t, $count in $kaka {
      $min-vw: $i + 1; // refactor
      @if ($min-vw > $cols) {
        $min-vw: 0; // refactor
      } @else {
        $min-vw: nth(nth($kaka, $min-vw), 1); // refactor
      }


      @media (min-width: #{$min-vw}px) and (max-width: #{$viewport}px) {
      //@media (max-width: #{$viewport}px) {
        zalupa: $min-vw;
        //$col-count: 8;

        //$col-stretch-count: 4;
        background-color: red;


        $all-colonok-tianetsia: $count / 2; // 4

        $te: $all-colonok-tianetsia + 1;

        //$be:

        // & > *:nth-child(4n):nth-last-child(4n - 1) ~ *:nth-last-child(-n + 2) {
        //   grid-column: span 2;
        // }

        // & > *:nth-child(6n):nth-last-child(6n - 2) ~ *:nth-last-child(-n + 3) {
        //   grid-column: span 2;
        // }

        // & > *:nth-child(8n):nth-last-child(8n - 3) ~ *:nth-last-child(-n + 4) {
        //   grid-column: span 2;
        // }


        // 10 - 4

        // & > *:nth-child(10n):nth-last-child(10n - 6) ~ *:nth-last-child(-n + 3) {
        //   grid-column: span 2;
        // }

        // & > *:nth-child(8n):nth-last-child(8n - 4) ~ *:nth-last-child(-n + 3) {
        //   grid-column: span 2;
        // }

        // & > *:nth-child(6n):nth-last-child(4) ~ *:nth-last-child(-n + 3) {
        //   grid-column: span 2;
        // }

        // & > *:nth-child(8n):nth-last-child(4) ~ *:nth-last-child(-n + 3) {
        //   grid-column: span 2;
        // }

        // & > *:nth-child(#{$count}n):nth-last-child(#{$te}) ~ *:nth-last-child(-n + #{$all-colonok-tianetsia}) {
        //   //grid-column: span 2;
        //   $po-colonke: 2;
        //   grid-column: span #{$po-colonke};
        // }

        & > *:nth-child(#{$count}n):nth-last-child(#{$te}) ~ * {
          //grid-column: span 2;
          $po-colonke: $count / ($count / 2);
          // count / 2 = 4 колонки
          // count / 4 = спан
          grid-column: span #{$po-colonke};
        }

      }

      $i: $i + 1;
    }
  }
}

@mixin stretch-last($min, $viewport, $mode: 'even') { // len четное
  $padding: 15 * 2;
  $scroll: 17.5;

  //$cols: 2;

  // @if $mode == 'even' {
  //   @if $cols % 2 != 0 {
  //     $cols: $cols - 1;
  //   } @else {
  //     $cols: $cols + 1;
  //   }
  // } @else if $mode == 'odd' {
  //   $treshold: 3;
  //
  //   @if $cols % 2 == 0 {
  //     $cols: $cols + 1;
  //   } @else {
  //     $cols: $cols - 1;
  //   }
  // }

  $cols: $cols + 1;

  //$viewport: $min * $cols + $gap * ($cols - 1) + $padding + $scroll;

  @media (max-width: #{$viewport}px) {
    & > div {
      &:last-child {
        grid-column: 1/-1;
      }
      &:nth-child(2n + 2) {
        grid-column: auto;
      }
    }
  }
}


// @mixin stretch-last($min, $cols, $gap: 30, $mode: 'even') { // len четное
//   $padding: 15 * 2;
//   $scroll: 17.5;
//
//   //$cols: 2;
//
//   // @if $mode == 'even' {
//   //   @if $cols % 2 != 0 {
//   //     $cols: $cols - 1;
//   //   } @else {
//   //     $cols: $cols + 1;
//   //   }
//   // } @else if $mode == 'odd' {
//   //   $treshold: 3;
//   //
//   //   @if $cols % 2 == 0 {
//   //     $cols: $cols + 1;
//   //   } @else {
//   //     $cols: $cols - 1;
//   //   }
//   // }
//
//   $cols: $cols + 1;
//
//   $viewport: $min * $cols + $gap * ($cols - 1) + $padding + $scroll;
//
//   @media (max-width: #{$viewport}px) {
//     & > div {
//       &:last-child {
//         grid-column: 1/-1;
//       }
//       &:nth-child(2n + 2) {
//         grid-column: auto;
//       }
//     }
//   }
// }


@function calc-grid-col-by-len($cols, $items-in-row, $decrement: 1) {
  $col: math.div($cols, $items-in-row);

  @if $cols <= 1 {
    @return $cols;
  }

  @if is-float($col) {
    @return calc-grid-col-by-len($cols, $items-in-row - $decrement);
  } @else {
    @return $col;
  }
}

@function to-template($grid-cols, $cols, $transformed-min-max-pairs, $mode) {
  $template: null;

  @if len($transformed-min-max-pairs) > 1 {
    $minmaxes: [];

    @each $pair in $transformed-min-max-pairs {
      $min: nth($pair, 1);
      $max: nth($pair, 2);
      $minmaxes: append($minmaxes, minmax($min, $max));
    }

    $minmaxes: #{to-string($minmaxes, ' ')};
    $template: repeat(auto-fit, $minmaxes);

  } @else {
    $pair: nth($transformed-min-max-pairs, 1);
    $min: nth($pair, 1);
    $max: nth($pair, 2);

    @if $mode == 'percent' {
      $template: repeat(auto-fit, $max);

    } @else if $mode == 'span' {
      $template: repeat($grid-cols, $max);

    } @else if $mode == 'px' {
      $template: repeat(auto-fit, minmax($min, $max));

    } @else {
      $template: repeat($cols, minmax(auto, $max));
    }
  }

  @return $template;
}

@function has-unit($number, $unit: null) {
  @if is-null($unit) {
    @return not unitless($number);
  }

  @return unit($number) == $unit;
}



@function calc-viewport-templates($values, $gap: 30, $mode: null, $decreaser: null, $stretch: false, $cols: 12) {

  // добавить min-viewport
  // может и max-viewport
  // возможно для fr не для multi добавить поддержку

  // на минимумах фиксить скролл

  $calculated: [];  // Переделать в мапу
  $min-max-pairs: [];
  $transformed-min-max-pairs: [];
  $is-one-pair: true;
  $items-in-row: $cols; // temp ?
  $container: del-unit(get-var(container));
  $padding: 15 * 2;
  $scroll: 17.5;
  $gaps-sum: null;
  $viewport: null;
  $grid-col: null;
  $decrement: 1;
  $treshold: 2;
  $template: null;
  $average-min: null;

  @if is-num($values) {

    @if not has-unit($values) {
      $cols: $values;

    } @else {
      //@error '';
    }

  } @else if is-list($values) {

    @each $value in $values {

      @if is-list($value) {
        $is-one-pair: false;
      }
    }

    @if $is-one-pair {
      $values: [$values];
    }

    @each $list in $values {

      @if len($list) > 1 {
        $min-max-pairs: append($min-max-pairs, (nth($list, 1), nth($list, 2)));

      } @else {
        $min-max-pairs: append($min-max-pairs, ('auto', nth($list, 1)));
      }
    }

  } @else {
    //@error '';
  }

  $is-one-pair: len($min-max-pairs) == 1;

  @if $decreaser {
    $decrement: 2;

    @if $decreaser == 'odd' {
      $treshold: 3;
    }
  }

  @if is-null($mode) {
    @if $is-one-pair {
      $max: soft-nth(nth($min-max-pairs, 1), 2);

      @if $max and not has-unit($max) {
        $mode: 'percent';
      }

    } @else {
      $mode: 'percent';
    }
  }



  @if is-null($cols) and $is-one-pair { // refactor condition

    @if has-unit($max, 'px') {
      $max: nth(nth($min-max-pairs, 1), 2);
      $max: del-unit($max);

      @while (($max + $gap) * ($cols + 1)) - $gap < $container { // refactor // or <= // похожее
        $cols: $cols + 1;
      }

    } @else { // refactor condition
      $cols: 12;
    }

  } @else { // refactor condition
    $cols: 12;
  }

  @if $is-one-pair {
    $max: nth(nth($min-max-pairs, 1), 2);

    @if $max and not has-unit($max) {


      $items-in-row: math.div($cols, $max);

    // } @else {
    //   $items-in-row: $cols;
    // }
    }
  }



  $grid-col: calc-grid-col-by-len($cols, $items-in-row, $decrement);
  $gaps-sum: $gap * ($items-in-row - 1);


  @each $pair in $min-max-pairs {
    $min: nth($pair, 1);
    $max: nth($pair, 2);

    @if is-null($max) { // temp and refactor or remove
      $max: 1fr;
    }

    @if not has-unit($max) {
      @if $mode == 'percent' {
        //$max: calc((100% - to-number($gaps-sum, 'px')) / $items-in-row); // calc((100% - to-number($gaps-sum, 'px')) / $cols / max);
        $filled-cols: math.div($cols, $max);
        //$items-width: 100% - to-number($gaps-sum, 'px');
        $max: calc((100% - to-number($gaps-sum, 'px')) / $filled-cols); // calc((100% - to-number($gaps-sum, 'px')) / $cols / max);

      } @else if $mode == 'span' {
        $max: 1fr;

      } @else if $mode == 'px' { // допилить
        $width-items-sum: $container - $gaps-sum;
        $col: math.div($width-items-sum, $cols);
        $max: $col * $max;
        $max: to-number($max, 'px');
        //$max: calc-responsive(180px, $max, 840px);
      }
    }





    $transformed-min-max-pairs: append($transformed-min-max-pairs, [$min, $max]);
  }



  // @if $is-one-pair {
  //   $min: nth(nth($min-max-pairs, 1), 1);
  //   $max: nth(nth($min-max-pairs, 1), 2);
  //
  //   @if is-null($max) {
  //     $max: 1fr;
  //   }
  //
  //   $transformed-min-max-pairs: append($transformed-min-max-pairs, [$min, 1fr]);
  // }


  $temp-i: 1;

  @each $pair in $transformed-min-max-pairs { // добавить функцию добавления индекса
    $min: nth($pair, 1);
    $max: nth($pair, 2);

    @if is-null($min) {
      $min: 1;

    } @else if $min == 'auto' {
      $min: 0.5; // temp
    }

    @if not has-unit($min) {
      $k: $min;

      @if is-num($max) and has-unit($max, 'px') {
        $min: del-unit($max) * $k;

      } @else {
        $width-items-sum: $container - $gaps-sum;
        $width-item: null; //refactor

        // $source-max: nth(nth($min-max-pairs, $temp-i), 2);
        // $filled-cols: math.div($cols, $source-max);
        // $width-item: math.div($width-items-sum, $filled-cols);

        @if $mode { // temp
          $source-max: nth(nth($min-max-pairs, $temp-i), 2);
          $filled-cols: math.div($cols, $source-max);
          $width-item: math.div($width-items-sum, $filled-cols);

        } @else {
          $width-item: math.div($width-items-sum, $items-in-row);
        }

        $min: $width-item * $k;
      }

      $min: to-number($min, 'px');
    }

    $transformed-min-max-pairs: replace-nth($transformed-min-max-pairs, $temp-i, [$min, $max]);

    $temp-i: $temp-i + 1;
  }



  $template: to-template($cols, $items-in-row, $transformed-min-max-pairs, $mode); // Добавить репит для повторяющихся шаблонов
  $calculated: append($calculated, ($viewport, $template, $items-in-row, $grid-col));


  @if $is-one-pair {
    $min: nth(nth($transformed-min-max-pairs, 1), 1);
    $average-min: del-unit($min);

  } @else {
    $mins: [];

    @each $pair in $transformed-min-max-pairs {
      $min: nth($pair, 1);
      $mins: append($mins, $min);
    }

    $average-min: math.div(sum($mins), len($mins));
  }

  @if $decreaser == 'even' {

    @if $items-in-row % 2 != 0 {
      $items-in-row: $items-in-row + 1;
    }

  } @else if $decreaser == 'odd' {

    @if $items-in-row % 2 == 0 {
      $items-in-row: $items-in-row + 1;
    }
  }


  @if $is-one-pair { // temp

    @while $items-in-row >= $treshold { // refactor
      $gaps-sum: $gap * ($items-in-row - 1);
      $viewport: ($average-min * $items-in-row) + $gaps-sum + $padding; // refactor test without padding
      $items-in-row: $items-in-row - $decrement;

      @if $items-in-row >= $treshold { // refactor
        $pair: nth($transformed-min-max-pairs, 1);
        $min: nth($pair, 1);
        $max: nth($pair, 2);

        @if $mode == 'percent' { // refactor // transform $transformed-min-max-pairs // MOVE TO to-template()
          $gaps-sum: $gap * ($items-in-row - 1);
          $gaps-sum: to-number($gaps-sum, 'px');
          $max: calc((100% - $gaps-sum) / $items-in-row); // ($col / $max) instead of $items-in-row

        } @else if $mode == 'px' { // to-template можно minmax() без минимума


          //$max: calc-responsive($min, $max, $viewport);
        }

        $transformed-min-max-pairs: replace-nth($transformed-min-max-pairs, 1, [$min, $max]);

        $template: to-template($cols, $items-in-row, $transformed-min-max-pairs, $mode); // возможно всю логику выше перенести в to-template()

      } @else {
        $template: 1fr;
      }

      @if $mode == 'span' { // на последнем viewport 1fr возможно все
        $grid-col: calc-grid-col-by-len($cols, $items-in-row, $decrement);
        $items-in-row: math.div($cols, $grid-col);
      }

      $calculated: append($calculated, ($viewport, $template, $items-in-row, $grid-col));
    }

  } @else { // temp
    $gaps-sum: $gap * ($items-in-row - 1);
    $viewport: ($average-min * $items-in-row) + $gaps-sum + $padding; // refactor test without padding
    $items-in-row: 1;
    $template: 1fr;
    $calculated: append($calculated, ($viewport, $template, $items-in-row, $grid-col));
  }

  @if $mode == 'px' and $is-one-pair { // refactor // template already present
    $temp-i: 1;

    $first-val: nth($calculated, 1);

    $pair: nth($transformed-min-max-pairs, 1);
    $min: nth($pair, 1);
    $max: nth($pair, 2);
    $viewport: $container + $padding;
    $template: nth($first-val, 2);
    $items-in-row: nth($first-val, 3);
    $grid-col: nth($first-val, 4);

    $calculated: insert-nth($calculated, 2, ($viewport, $template, $items-in-row, $grid-col));


    @while $temp-i < len($calculated) {

      @if $temp-i > 1 {
        $pair: nth($transformed-min-max-pairs, 1);
        $min: nth($pair, 1);
        $max: nth($pair, 2);




        $temp: nth($calculated, $temp-i);
        $viewport: nth($temp, 1);
        $items-in-row: nth($temp, 3);

        $prev-items-in-row: nth(nth($calculated, $temp-i - 1), 3);


        $gaps-sum: $gap * ($items-in-row - 1);
        $gaps-sum: to-number($gaps-sum, 'px');

        $max: ($viewport - $gaps-sum - $padding) / $items-in-row;


        $min: $min - (17.5 / $items-in-row);
        $max: $max - (17.5 / $items-in-row);

        $grid-col: nth($temp, 4);
        $next-viewport: nth(nth($calculated, $temp-i + 1), 1);
        $template: calc-responsive($min, $max, to-number($next-viewport, 'px'), to-number($viewport, 'px'));
        $template: repeat(auto-fit, minmax($min, $template));
        $calculated: replace-nth($calculated, $temp-i, ($viewport, $template, $items-in-row, $grid-col));
      }

      $temp-i: $temp-i + 1;
    }
  }

  @debug $calculated;

  @return $calculated;
}




@mixin smart-grid($value, $mode: null, $decreaser: null, $stretch: false, $cols: 12) {

  //$scroll: '(100vw - 100%)';
  //--d: #{$scroll} / #{$cols};

  $gap: 30;
  $padding: 15;


  display: grid;
  grid-column-gap: #{$gap}px;
  justify-content: space-between;
  margin: 0 auto;

  @if $padding { // refactor // Можно ли вычислять без паддинга?
    padding-left: #{$padding}px;
    padding-right: #{$padding}px;
  } @else {
    $padding: 0;
  }

  $calculated: calc-viewport-templates($value, $mode: $mode, $decreaser: $decreaser, $cols: $cols);
  $i: 1;

  @each $viewport, $template, $cols, $grid-col, $max in $calculated { // refactor

    @if $i == 1 {
      $viewport-min: nth(nth($calculated, 2), 1);

      @media (min-width: #{$viewport-min}px) {
        grid-template-columns: $template;

        @if $mode == 'span' {
          & > * {
            grid-column: span $grid-col;
          }
        }
      }

    } @else if $i != len($calculated) {
      $viewport-min: nth(nth($calculated, $i + 1), 1);
      $viewport-max: $viewport;

      @media (min-width: #{$viewport-min}px) and (max-width: #{$viewport-max}px) {
        grid-template-columns: $template;

        @if $mode == 'span' {
          & > * {
            grid-column: span $grid-col;
          }
        }
      }
    } @else {

        $viewport-max: $viewport;

        @media (max-width: #{$viewport-max}px) {
          grid-template-columns: $template;

          @if $mode == 'span' {
            & > * {
              grid-column: span $grid-col;
            }
          }
        }
    }

    $i: $i + 1;
  }

  & > * {
    background-color: #6ba9fb;
  }
}








// @mixin smart-grid($list) { // replace on func
//   $cols: len($list);
//   $scroll: '(100vw - 100%)';
//   --d: #{$scroll} / #{$cols};
//
//   $max-width: del-unit(get-var(container)); // test without container
//   $col: math.div($max-width, 12);
//   $gap: 30;
//
//
//   $templates: ();
//   $mins: ();
//
//   $templates-scroll-fix: ();
//   $mins-scroll-fix: ();
//
//   $padding: 15;
//
//   @each $value in $list {
//
//     @if (type-of($value) == 'list') {
//       $min: to-smart-grid-value(nth($value, 1), $col);
//
//       $max: to-smart-grid-value(nth($value, 2), $col);
//       $mins: append($mins, $min);
//
//       $mins-scroll-fix: append($mins, fix-scroll($min, $cols));
//       $templates-scroll-fix: append($templates-scroll-fix, minmax(fix-scroll($min, $cols), $max));
//
//       $templates: append($templates, minmax($min, $max));
//
//     } @else {
//       $value: to-smart-grid-value($value, $col);
//       $mins: append($mins, $value);
//       $templates: append($templates, $value);
//     }
//   }
//
//   // @error $mins;
//
//   //$mins: sum($mins);
//
//
//   //$padding: 0;
//
//   width: 100%;
//   max-width: #{$max-width}px; // scroll fix
//   //max-width: calc(#{$max-width}px + 30px); // scroll fix
//
//   display: grid;
//   grid-template-columns: repeat(auto-fit, #{$templates});
//   grid-column-gap: #{$gap}px;
//   justify-content: space-between;
//   margin: 0 auto;
//
//   @if $padding {
//     padding-left: #{$padding}px;
//     padding-right: #{$padding}px;
//   } @else {
//     $padding: 0;
//   }
//
//   $start-responsive: sum($mins) + $gap * ($cols - 1) + ($padding * 2);
//   $fix-scroll-responsive: $start-responsive + 30;
//
//   @media (max-width: #{$fix-scroll-responsive}px) {
//     grid-template-columns: repeat(auto-fit, #{$templates-scroll-fix});
//   }
//
//
//
//   @media (max-width: #{$start-responsive}px) {
//     //grid-template-columns: repeat(auto-fit, parse-minmax(list.zip($mins-scroll-fix, split(repeater(1fr, $cols)))));
//     //grid-template-columns: repeat(auto-fit, parse-minmax(list.zip($mins, split(repeater(1fr, $cols)))));
//     grid-template-columns: 1fr;
//   }
//
//   & > * {
//     background-color: #6ba9fb;
//   }
// }



// @mixin smart-grid($list) { // replace on func
//   $max-width: del-unit(get-var(container));
//   $col: math.div($max-width, 12);
//   $gap: 30;
//   $cols: len($list);
//
//   $templates: ();
//   $templates-scroll-fix: ();
//   $mins: ();
//   $mins-scroll-fix: ();
//
//   @each $value in $list {
//     @if (type-of($value) == 'list') {
//       $min: to-smart-grid-value(nth($value, 1), $col);
//       $max: to-smart-grid-value(nth($value, 2), $col);
//       $mins: append($mins, $min);
//       $mins-scroll-fix: append($mins, fix-scroll($min, $cols));
//       $templates: append($templates, minmax($min, $max));
//       $templates-scroll-fix: append($templates-scroll-fix, minmax(fix-scroll($min, $cols), $max));
//
//     } @else {
//       $value: to-smart-grid-value($value, $col);
//       $mins: append($mins, $value);
//       $mins-scroll-fix: append($mins, fix-scroll($value, $cols));
//       $templates: append($templates, $value);
//       $templates-scroll-fix: append($templates-scroll-fix, fix-scroll($value, $cols));
//     }
//   }
//
//   //$mins: sum($mins);
//
//   width: 100%;
//   max-width: #{$max-width}px; // scroll fix
//   //max-width: calc(#{$max-width}px + 30px); // scroll fix
//   //padding-left: 15px;
//   //padding-right: 15px;
//   display: grid;
//   grid-template-columns: repeat(auto-fit, #{$templates});
//   grid-column-gap: #{$gap}px;
//   justify-content: space-between;
//   margin: 0 auto;
//
//
//
//   //overflow: hidden;
//
//   //grid-template-columns: repeat(auto-fit, parse-minmax(list.zip($mins-scroll-fix, split(repeater(1fr, $cols)))));
//
//   @media (max-width: #{$max-width} + 'px') {
//     grid-template-columns: repeat(auto-fit, #{$templates-scroll-fix});
//     //grid-template-columns: repeat(auto-fit, parse-minmax(list.zip($mins-scroll-fix, split(repeater(1fr, $cols)))));
//   }
//
//   @media (max-width: sum($mins) + $gap * ($cols - 1) + 'px') { // refactor count > 1
//     //grid-template-columns: repeat(auto-fit, parse-minmax(list.zip($mins-scroll-fix, split(repeater(1fr, $cols)))));
//     //grid-template-columns: repeat(auto-fit, parse-minmax(list.zip($mins, split(repeater(1fr, $cols)))));
//     grid-template-columns: 1fr;
//   }
//
//   & > * {
//     background-color: #6ba9fb;
//   }
// }
